// Code generated by MockGen. DO NOT EDIT.
// Source: ./cache/cache.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockCache is a mock of Cache interface.
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
}

// MockCacheMockRecorder is the mock recorder for MockCache.
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance.
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// Cap mocks base method.
func (m *MockCache) Cap() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cap")
	ret0, _ := ret[0].(int)
	return ret0
}

// Cap indicates an expected call of Cap.
func (mr *MockCacheMockRecorder) Cap() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cap", reflect.TypeOf((*MockCache)(nil).Cap))
}

// Clear mocks base method.
func (m *MockCache) Clear() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clear")
}

// Clear indicates an expected call of Clear.
func (mr *MockCacheMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockCache)(nil).Clear))
}

// Contains mocks base method.
func (m *MockCache) Contains(key interface{}) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Contains", key)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Contains indicates an expected call of Contains.
func (mr *MockCacheMockRecorder) Contains(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Contains", reflect.TypeOf((*MockCache)(nil).Contains), key)
}

// Get mocks base method.
func (m *MockCache) Get(key interface{}) (interface{}, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCacheMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCache)(nil).Get), key)
}

// Len mocks base method.
func (m *MockCache) Len() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Len")
	ret0, _ := ret[0].(int)
	return ret0
}

// Len indicates an expected call of Len.
func (mr *MockCacheMockRecorder) Len() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Len", reflect.TypeOf((*MockCache)(nil).Len))
}

// Peek mocks base method.
func (m *MockCache) Peek(key interface{}) (interface{}, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Peek", key)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Peek indicates an expected call of Peek.
func (mr *MockCacheMockRecorder) Peek(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Peek", reflect.TypeOf((*MockCache)(nil).Peek), key)
}

// Put mocks base method.
func (m *MockCache) Put(key, value interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Put", key, value)
}

// Put indicates an expected call of Put.
func (mr *MockCacheMockRecorder) Put(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockCache)(nil).Put), key, value)
}

// Remove mocks base method.
func (m *MockCache) Remove(key interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Remove", key)
}

// Remove indicates an expected call of Remove.
func (mr *MockCacheMockRecorder) Remove(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockCache)(nil).Remove), key)
}

// MockNamedCache is a mock of NamedCache interface.
type MockNamedCache struct {
	ctrl     *gomock.Controller
	recorder *MockNamedCacheMockRecorder
}

// MockNamedCacheMockRecorder is the mock recorder for MockNamedCache.
type MockNamedCacheMockRecorder struct {
	mock *MockNamedCache
}

// NewMockNamedCache creates a new mock instance.
func NewMockNamedCache(ctrl *gomock.Controller) *MockNamedCache {
	mock := &MockNamedCache{ctrl: ctrl}
	mock.recorder = &MockNamedCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNamedCache) EXPECT() *MockNamedCacheMockRecorder {
	return m.recorder
}

// Cap mocks base method.
func (m *MockNamedCache) Cap() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cap")
	ret0, _ := ret[0].(int)
	return ret0
}

// Cap indicates an expected call of Cap.
func (mr *MockNamedCacheMockRecorder) Cap() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cap", reflect.TypeOf((*MockNamedCache)(nil).Cap))
}

// Clear mocks base method.
func (m *MockNamedCache) Clear() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clear")
}

// Clear indicates an expected call of Clear.
func (mr *MockNamedCacheMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockNamedCache)(nil).Clear))
}

// Contains mocks base method.
func (m *MockNamedCache) Contains(key interface{}) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Contains", key)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Contains indicates an expected call of Contains.
func (mr *MockNamedCacheMockRecorder) Contains(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Contains", reflect.TypeOf((*MockNamedCache)(nil).Contains), key)
}

// Get mocks base method.
func (m *MockNamedCache) Get(key interface{}) (interface{}, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockNamedCacheMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockNamedCache)(nil).Get), key)
}

// Len mocks base method.
func (m *MockNamedCache) Len() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Len")
	ret0, _ := ret[0].(int)
	return ret0
}

// Len indicates an expected call of Len.
func (mr *MockNamedCacheMockRecorder) Len() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Len", reflect.TypeOf((*MockNamedCache)(nil).Len))
}

// Name mocks base method.
func (m *MockNamedCache) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockNamedCacheMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockNamedCache)(nil).Name))
}

// Peek mocks base method.
func (m *MockNamedCache) Peek(key interface{}) (interface{}, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Peek", key)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Peek indicates an expected call of Peek.
func (mr *MockNamedCacheMockRecorder) Peek(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Peek", reflect.TypeOf((*MockNamedCache)(nil).Peek), key)
}

// Put mocks base method.
func (m *MockNamedCache) Put(key, value interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Put", key, value)
}

// Put indicates an expected call of Put.
func (mr *MockNamedCacheMockRecorder) Put(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockNamedCache)(nil).Put), key, value)
}

// Remove mocks base method.
func (m *MockNamedCache) Remove(key interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Remove", key)
}

// Remove indicates an expected call of Remove.
func (mr *MockNamedCacheMockRecorder) Remove(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockNamedCache)(nil).Remove), key)
}

// MockNamed is a mock of Named interface.
type MockNamed struct {
	ctrl     *gomock.Controller
	recorder *MockNamedMockRecorder
}

// MockNamedMockRecorder is the mock recorder for MockNamed.
type MockNamedMockRecorder struct {
	mock *MockNamed
}

// NewMockNamed creates a new mock instance.
func NewMockNamed(ctrl *gomock.Controller) *MockNamed {
	mock := &MockNamed{ctrl: ctrl}
	mock.recorder = &MockNamedMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNamed) EXPECT() *MockNamedMockRecorder {
	return m.recorder
}

// Name mocks base method.
func (m *MockNamed) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockNamedMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockNamed)(nil).Name))
}

// MockCapSetter is a mock of CapSetter interface.
type MockCapSetter struct {
	ctrl     *gomock.Controller
	recorder *MockCapSetterMockRecorder
}

// MockCapSetterMockRecorder is the mock recorder for MockCapSetter.
type MockCapSetterMockRecorder struct {
	mock *MockCapSetter
}

// NewMockCapSetter creates a new mock instance.
func NewMockCapSetter(ctrl *gomock.Controller) *MockCapSetter {
	mock := &MockCapSetter{ctrl: ctrl}
	mock.recorder = &MockCapSetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCapSetter) EXPECT() *MockCapSetterMockRecorder {
	return m.recorder
}

// SetCap mocks base method.
func (m *MockCapSetter) SetCap(cap int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCap", cap)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCap indicates an expected call of SetCap.
func (mr *MockCapSetterMockRecorder) SetCap(cap interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCap", reflect.TypeOf((*MockCapSetter)(nil).SetCap), cap)
}

// MockTTLSetter is a mock of TTLSetter interface.
type MockTTLSetter struct {
	ctrl     *gomock.Controller
	recorder *MockTTLSetterMockRecorder
}

// MockTTLSetterMockRecorder is the mock recorder for MockTTLSetter.
type MockTTLSetterMockRecorder struct {
	mock *MockTTLSetter
}

// NewMockTTLSetter creates a new mock instance.
func NewMockTTLSetter(ctrl *gomock.Controller) *MockTTLSetter {
	mock := &MockTTLSetter{ctrl: ctrl}
	mock.recorder = &MockTTLSetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTTLSetter) EXPECT() *MockTTLSetterMockRecorder {
	return m.recorder
}

// SetTTL mocks base method.
func (m *MockTTLSetter) SetTTL(ttl time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTTL", ttl)
}

// SetTTL indicates an expected call of SetTTL.
func (mr *MockTTLSetterMockRecorder) SetTTL(ttl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTTL", reflect.TypeOf((*MockTTLSetter)(nil).SetTTL), ttl)
}

// MockWithTTLPutter is a mock of WithTTLPutter interface.
type MockWithTTLPutter struct {
	ctrl     *gomock.Controller
	recorder *MockWithTTLPutterMockRecorder
}

// MockWithTTLPutterMockRecorder is the mock recorder for MockWithTTLPutter.
type MockWithTTLPutterMockRecorder struct {
	mock *MockWithTTLPutter
}

// NewMockWithTTLPutter creates a new mock instance.
func NewMockWithTTLPutter(ctrl *gomock.Controller) *MockWithTTLPutter {
	mock := &MockWithTTLPutter{ctrl: ctrl}
	mock.recorder = &MockWithTTLPutterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWithTTLPutter) EXPECT() *MockWithTTLPutterMockRecorder {
	return m.recorder
}

// PutWithTTL mocks base method.
func (m *MockWithTTLPutter) PutWithTTL(key, value interface{}, ttl time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PutWithTTL", key, value, ttl)
}

// PutWithTTL indicates an expected call of PutWithTTL.
func (mr *MockWithTTLPutterMockRecorder) PutWithTTL(key, value, ttl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutWithTTL", reflect.TypeOf((*MockWithTTLPutter)(nil).PutWithTTL), key, value, ttl)
}

// MockKeysGetter is a mock of KeysGetter interface.
type MockKeysGetter struct {
	ctrl     *gomock.Controller
	recorder *MockKeysGetterMockRecorder
}

// MockKeysGetterMockRecorder is the mock recorder for MockKeysGetter.
type MockKeysGetterMockRecorder struct {
	mock *MockKeysGetter
}

// NewMockKeysGetter creates a new mock instance.
func NewMockKeysGetter(ctrl *gomock.Controller) *MockKeysGetter {
	mock := &MockKeysGetter{ctrl: ctrl}
	mock.recorder = &MockKeysGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeysGetter) EXPECT() *MockKeysGetterMockRecorder {
	return m.recorder
}

// Keys mocks base method.
func (m *MockKeysGetter) Keys() []interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys")
	ret0, _ := ret[0].([]interface{})
	return ret0
}

// Keys indicates an expected call of Keys.
func (mr *MockKeysGetterMockRecorder) Keys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockKeysGetter)(nil).Keys))
}
